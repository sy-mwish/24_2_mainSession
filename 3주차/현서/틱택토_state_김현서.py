# -*- coding: utf-8 -*-
"""틱택토 State - 김현서

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hpXJnRuBQSJ-xjluXOL1I3ahNgCCY8n_

# State class
틱택토 상태를 나타낼 수 있는 class를 만들어 주세요.

- 2명의 플레이어가 있고, 각 플레이어의 수가 뭔지 식별가능해야 합니다.  

**꼭 구현해야할 매소드(주니어/시니어 공통)**
- 둘 수 있는 위치가 어딘지 알려주는 함수
- win / lose / draw를 식별해주는 함수
- render 함수

**min-max algorithm / alpha-beta algorithm 구현(시니어)**

### 🚨 만약 감이 안 온다면 운영진에게 연락주시면 참고할 만한 레퍼런스를 보내드리겠습니다.
### 🚨 참고한 레퍼런스가 있다면, 출처를 남겨주세요.
"""

class TicTacToe:
    def __init__(self):
        # 3x3 빈 보드를 초기화 (빈칸은 None으로 표시)
        self.board = [[None for _ in range(3)] for _ in range(3)]
        self.current_player = 'X'  # X가 먼저 시작
        self.winner = None

    def switch_player(self):
        # 현재 플레이어를 변경
        self.current_player = 'O' if self.current_player == 'X' else 'X'

    def is_valid_move(self, row, col):
        # 주어진 위치가 비어 있으면 유효한 움직임
        return self.board[row][col] is None

    def make_move(self, row, col):
        # 주어진 위치에 현재 플레이어의 마크를 두는 함수 (X의 수는 X, O의 수는 O이므로 현재 self.current_player로 표시)
        if self.is_valid_move(row, col):
            self.board[row][col] = self.current_player
            if self.check_winner():
                self.winner = self.current_player
            else:
                self.switch_player()
        else:
            print(f"Invalid move at ({row}, {col}). Try again.")

    def available_moves(self):
        # 남아있는 빈칸(둘 수 있는 위치)의 리스트를 반환
        return [(r, c) for r in range(3) for c in range(3) if self.board[r][c] is None]

    def check_winner(self):
        # 가로, 세로, 대각선에 동일한 플레이어의 마크가 있는지 확인
        for row in range(3):
            if self.board[row][0] == self.board[row][1] == self.board[row][2] == self.current_player:
                return True
        for col in range(3):
            if self.board[0][col] == self.board[1][col] == self.board[2][col] == self.current_player:
                return True
        if self.board[0][0] == self.board[1][1] == self.board[2][2] == self.current_player:
            return True
        if self.board[0][2] == self.board[1][1] == self.board[2][0] == self.current_player:
            return True
        return False

    def is_draw(self):
        # 빈칸이 없고 승자가 없는 경우 무승부
        return all(self.board[row][col] is not None for row in range(3) for col in range(3)) and self.winner is None

    def render(self):
        # 현재 보드를 텍스트로 표시
        for row in self.board:
            print(' | '.join([cell if cell is not None else ' ' for cell in row]))
            print('-' * 9)

    def game_status(self):
        # 게임 상태를 확인하는 함수 (승리, 무승부, 진행 중)
        if self.winner:
            return f"Player {self.winner} wins!"
        elif self.is_draw():
            return "Draw!"
        else:
            return f"Player {self.current_player}'s turn."

# 실행 코드
if __name__ == "__main__":
    game = TicTacToe()
    game.render()
    while not game.winner and not game.is_draw():
        row, col = map(int, input("Enter row and column (0-2): ").split())
        game.make_move(row, col)
        game.render()
        print(game.game_status())

from google.colab import drive
drive.mount('/content/drive')

